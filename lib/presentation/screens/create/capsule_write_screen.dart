import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../../../models/capsule.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'dart:typed_data';
import '../home/widgets/emoji_selector.dart';

class CapsuleWriteScreen extends StatefulWidget {
  final CapsuleType capsuleType;
  const CapsuleWriteScreen({super.key, required this.capsuleType});

  @override
  State<CapsuleWriteScreen> createState() => _CapsuleWriteScreenState();
}

class _CapsuleWriteScreenState extends State<CapsuleWriteScreen> {
  String selectedMood = 'üòä';
  String selectedSituation = 'üí∞';
  final TextEditingController _titleController = TextEditingController();

  // Î™®ÏûÑ Î©§Î≤ÑÎì§Ïùò ÏµúÍ∑º ÌôúÎèô (ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞)
  final List<Map<String, dynamic>> memberActivities = [
    {
      'member': 'Ïù¥Ï†ïÏùÄ',
      'emoji': 'üòä',
      'activity': 'Ï†êÏã¨Í∞í Í≥µÎèô Í≤∞Ï†ú',
      'amount': '-15,000Ïõê',
      'time': '2ÏãúÍ∞Ñ Ï†Ñ',
    },
    {
      'member': 'ÍπÄÌòúÏßÑ',
      'emoji': 'ü§ó',
      'activity': 'Ïó¨Ìñâ Í≤ΩÎπÑ Ï†ÅÍ∏à',
      'amount': '+50,000Ïõê',
      'time': '4ÏãúÍ∞Ñ Ï†Ñ',
    },
    {
      'member': 'ÍπÄÏàòÎ¶Ñ',
      'emoji': 'üí™',
      'activity': 'Ïπ¥Ìéò Í∞ÑÏãùÎπÑ',
      'amount': '-8,500Ïõê',
      'time': '6ÏãúÍ∞Ñ Ï†Ñ',
    },
    {
      'member': 'ÌïúÏßÄÌòú',
      'emoji': 'üåü',
      'activity': 'ÏòÅÌôî Í¥ÄÎûåÎπÑ',
      'amount': '-12,000Ïõê',
      'time': '1Ïùº Ï†Ñ',
    },
  ];

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new_rounded),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(widget.capsuleType == CapsuleType.personal
            ? 'ÎÇòÏùò Í∏àÏúµ ÏùºÍ∏∞'
            : 'Î™®ÏûÑ Í∏àÏúµ ÏùºÍ∏∞'),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () {},
          ),
        ],
        elevation: 0,
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
      ),
      backgroundColor: const Color(0xFFF8F8FA),
      body: ListView(
        padding: const EdgeInsets.symmetric(horizontal: 0, vertical: 0),
        children: [
          const _DateSection(),
          const SizedBox(height: 12),
          if (widget.capsuleType == CapsuleType.group) ...[
            _buildGroupMemberActivities(),
            const SizedBox(height: 12),
            _buildGroupTitleInput(),
            const SizedBox(height: 18),
          ] else ...[
            const _FinanceActivitySection(),
            const SizedBox(height: 18),
          ],
          EmojiSelector(
            title: widget.capsuleType == CapsuleType.personal
                ? 'Í∏∞Î∂Ñ ÏÑ†ÌÉùÌïòÍ∏∞ üòä'
                : 'Ïò§Îäò Î™®ÏûÑ Í∏∞Î∂ÑÏùÄ? üòä',
            selectedEmoji: selectedMood,
            emojis: EmojiCategories.moods,
            onSelected: (emoji) {
              setState(() {
                selectedMood = emoji;
              });
            },
          ),
          const SizedBox(height: 12),
          EmojiSelector(
            title: widget.capsuleType == CapsuleType.personal
                ? 'ÎÇ¥ ÏÉÅÌô© ÏÑ†ÌÉùÌïòÍ∏∞ üí∞'
                : 'Ïö∞Î¶¨ Î™®ÏûÑ ÏÉÅÌô©ÏùÄ? üí∞',
            selectedEmoji: selectedSituation,
            emojis: EmojiCategories.financialSituations,
            onSelected: (emoji) {
              setState(() {
                selectedSituation = emoji;
              });
            },
          ),
          const SizedBox(height: 18),
          _DiarySection(
            selectedMood: selectedMood,
            selectedSituation: selectedSituation,
            capsuleType: widget.capsuleType,
            titleController: _titleController,
          ),
          const SizedBox(height: 18),
          const _PhotoSection(),
          const SizedBox(height: 18),
          const _RewardSection(),
          const SizedBox(height: 24),
        ],
      ),
      bottomNavigationBar: _BottomButtons(),
    );
  }

  Widget _buildGroupMemberActivities() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(18),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Î™®ÏûÑÏõêÎì§Ïùò ÏµúÍ∑º ÌôúÎèô',
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: const Color(0xFF4CAF50).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  '${memberActivities.length}Í∞ú ÏóÖÎç∞Ïù¥Ìä∏',
                  style: const TextStyle(
                    color: Color(0xFF4CAF50),
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          ...memberActivities
              .map((activity) => _buildMemberActivityItem(activity)),
        ],
      ),
    );
  }

  Widget _buildMemberActivityItem(Map<String, dynamic> activity) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F8FA),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Row(
        children: [
          CircleAvatar(
            radius: 18,
            backgroundColor: const Color(0xFF4CAF50).withOpacity(0.1),
            child: Text(
              activity['emoji'],
              style: const TextStyle(fontSize: 16),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      activity['member'],
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Text(
                      activity['time'],
                      style: const TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  activity['activity'],
                  style: const TextStyle(fontSize: 13),
                ),
              ],
            ),
          ),
          Text(
            activity['amount'],
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 14,
              color:
                  activity['amount'].startsWith('+') ? Colors.blue : Colors.red,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGroupTitleInput() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(18),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.edit, color: Color(0xFF4CAF50)),
              SizedBox(width: 8),
              Text(
                'Î™®ÏûÑ ÌÉÄÏûÑÏ∫°Ïäê Ï†úÎ™©',
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
            ],
          ),
          const SizedBox(height: 12),
          TextField(
            controller: _titleController,
            decoration: InputDecoration(
              hintText: 'Ïòà: Ïö∞Î¶¨Îì§Ïùò ÏÜåÏ§ëÌïú Ï∂îÏñµ ÎßåÎì§Í∏∞',
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: BorderSide(color: Colors.grey.shade300),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
                borderSide: const BorderSide(color: Color(0xFF4CAF50)),
              ),
              filled: true,
              fillColor: const Color(0xFFF8F8FA),
            ),
          ),
        ],
      ),
    );
  }
}

class _DateSection extends StatelessWidget {
  const _DateSection();
  @override
  Widget build(BuildContext context) {
    return const Padding(
      padding: EdgeInsets.only(left: 20, right: 20, top: 16, bottom: 0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('2025ÎÖÑ 5Ïõî 12Ïùº ÏõîÏöîÏùº',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 22)),
          SizedBox(height: 4),
          Text('Ïò§ÌõÑ 3:08 ÏûëÏÑ± Ï§ë',
              style: TextStyle(color: Colors.black54, fontSize: 14)),
        ],
      ),
    );
  }
}

class _FinanceActivitySection extends StatelessWidget {
  const _FinanceActivitySection();
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(18),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text('Ïò§ÎäòÏùò Í∏àÏúµ ÌôúÎèô',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
              TextButton(
                onPressed: () {},
                child: const Text('ÎçîÎ≥¥Í∏∞',
                    style: TextStyle(
                        color: Color(0xFF4CAF50), fontWeight: FontWeight.bold)),
              ),
            ],
          ),
          const SizedBox(height: 8),
          const _FinanceActivityItem(
            icon: Icons.arrow_upward,
            iconColor: Colors.red,
            title: 'Ïä§ÌÉÄÎ≤ÖÏä§ Í∞ïÎÇ®Ï†ê',
            subtitle: 'NH Ï≤¥ÌÅ¨Ïπ¥Îìú',
            amount: '-5,600Ïõê',
            amountColor: Colors.red,
          ),
          const _FinanceActivityItem(
            icon: Icons.arrow_downward,
            iconColor: Colors.blue,
            title: 'Í∏âÏó¨',
            subtitle: 'NH ÌÜµÏû•',
            amount: '+2,450,000Ïõê',
            amountColor: Colors.blue,
          ),
          const _FinanceActivityItem(
            icon: Icons.camera,
            iconColor: Colors.green,
            title: 'Ï†ÅÍ∏à ÏûêÎèôÏù¥Ï≤¥',
            subtitle: 'NH Ï†ÅÍ∏à',
            amount: '500,000Ïõê',
            amountColor: Colors.green,
          ),
        ],
      ),
    );
  }
}

class _FinanceActivityItem extends StatelessWidget {
  final IconData icon;
  final Color iconColor;
  final String title;
  final String subtitle;
  final String amount;
  final Color amountColor;
  const _FinanceActivityItem({
    required this.icon,
    required this.iconColor,
    required this.title,
    required this.subtitle,
    required this.amount,
    required this.amountColor,
  });
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6),
      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 12),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F8FA),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Icon(icon, color: iconColor, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title,
                    style: const TextStyle(
                        fontWeight: FontWeight.bold, fontSize: 15)),
                Text(subtitle,
                    style:
                        const TextStyle(fontSize: 12, color: Colors.black54)),
              ],
            ),
          ),
          Text(amount,
              style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: amountColor,
                  fontSize: 16)),
        ],
      ),
    );
  }
}

class _DiarySection extends StatelessWidget {
  final String selectedMood;
  final String selectedSituation;
  final CapsuleType capsuleType;
  final TextEditingController titleController;

  const _DiarySection({
    required this.selectedMood,
    required this.selectedSituation,
    required this.capsuleType,
    required this.titleController,
  });

  @override
  Widget build(BuildContext context) {
    final args = ModalRoute.of(context)?.settings.arguments as Map?;
    final capsuleInfo = args?['capsuleInfo'] as Map?;
    final title = capsuleInfo?['title'] as String? ??
        (capsuleType == CapsuleType.personal ? 'ÏõîÏöîÎ≥ë ÎïåÎ¨∏Ïóê ÌûòÎì† ÌïòÎ£®' : 'Ïö∞Î¶¨Îì§Ïùò Ï¶êÍ±∞Ïö¥ Î™®ÏûÑ');

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(18),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                '$selectedMood $selectedSituation',
                style: const TextStyle(fontSize: 20),
              ),
              const SizedBox(width: 8),
              Text(
                capsuleType == CapsuleType.personal ? 'Ïò§ÎäòÏùò ÏùºÍ∏∞' : 'Ïö∞Î¶¨ Î™®ÏûÑ Ïù¥ÏïºÍ∏∞',
                style:
                    const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
            ],
          ),
          if (capsuleType == CapsuleType.personal) ...[
            const SizedBox(height: 12),
            const Text('Ï†úÎ™©',
                style: TextStyle(fontWeight: FontWeight.w600, fontSize: 13)),
            const SizedBox(height: 4),
            TextFormField(
              controller: titleController,
              decoration: InputDecoration(
                contentPadding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
                border:
                    OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                filled: true,
                fillColor: const Color(0xFFF8F8FA),
              ),
            ),
          ],
          const SizedBox(height: 12),
          Text(
            capsuleType == CapsuleType.personal ? 'ÎÇ¥Ïö©' : 'Ïò§Îäò Ïö∞Î¶¨ Î™®ÏûÑÏùÄ?',
            style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 13),
          ),
          const SizedBox(height: 4),
          TextFormField(
            maxLines: 5,
            initialValue: capsuleType == CapsuleType.personal
                ? 'ÏõîÏöîÏùºÏù¥Îùº Ï†ïÎßê ÌîºÍ≥§ÌïòÍ≥† ÌûòÎì§Îã§. Ï£ºÎßêÏù¥ ÎÑàÎ¨¥ ÏßßÍ≤å ÎäêÍª¥ÏßÄÍ≥† ÏùºÏ£ºÏùºÏù¥ Îòê ÏãúÏûëÎêúÎã§Îäî ÏÉùÍ∞ÅÏóê Ïö∞Ïö∏ÌïòÎã§. Ïä§Ìä∏Î†àÏä§Î•º ÌíÄÍ≥† Ïã∂Ïñ¥ÏÑú Ïπ¥ÌéòÏóêÏÑú ÎπÑÏã∏ÏßÄÎßå ÎßõÏûàÎäî ÏùåÎ£åÎ•º ÎßàÏãúÍ≥† Î∞∞Îã¨ÏùåÏãùÎèÑ ÏãúÏº∞Îã§. Í≥ÑÌöç ÏóÜÏù¥ ÏÜåÎπÑÌïòÎäî ÎÇ¥ Î™®ÏäµÏù¥ Í±±Ï†ïÎêòÏßÄÎßå, Ïò§ÎäòÎßåÌÅºÏùÄ ÎÇòÎ•º ÏúÑÎ°úÌï¥Ï£ºÍ≥† Ïã∂ÏóàÎã§.'
                : 'Ïò§ÎäòÏùÄ Î™®Îëê Ìï®Íªò Ï†êÏã¨ÏùÑ Î®πÍ≥† Ï¶êÍ±∞Ïö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÉàÏñ¥Ïöî! Ïù¥Ï†ïÏùÄÎãòÏù¥ ÎßõÏûàÎäî Ïπ¥ÌéòÎ•º Ï∂îÏ≤úÌï¥Ï£ºÏÖîÏÑú Îã§Í∞ôÏù¥ Í∞îÎäîÎç∞ Ï†ïÎßê Ï¢ãÏïòÎãµÎãàÎã§. ÍπÄÌòúÏßÑÎãòÍ≥º ÍπÄÏàòÎ¶ÑÎãòÏùÄ Îã§Ïùå Î™®ÏûÑ Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÏ£ºÏãúÍ≥†, ÌïúÏßÄÌòúÎãòÏùÄ ÏÇ¨ÏßÑÏùÑ Ï†ïÎßê Ïûò Ï∞çÏñ¥Ï£ºÏÖ®Ïñ¥Ïöî. Ïö∞Î¶¨ Î™®ÏûÑÏù¥ Ïù¥Î†áÍ≤å Ï¶êÍ±∞Ïö¥ Ï§Ñ Î™∞ÎûêÎÑ§Ïöî! üíï',
            decoration: InputDecoration(
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
              border:
                  OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
              filled: true,
              fillColor: const Color(0xFFF8F8FA),
            ),
          ),
        ],
      ),
    );
  }
}

class _PhotoSection extends StatefulWidget {
  const _PhotoSection();

  @override
  State<_PhotoSection> createState() => _PhotoSectionState();
}

class _PhotoSectionState extends State<_PhotoSection> {
  File? _imageFile;
  Uint8List? _webImageBytes;
  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
  }

  Future<void> _pickImage() async {
    try {
      final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
      if (image != null) {
        if (kIsWeb) {
          final bytes = await image.readAsBytes();
          setState(() {
            _webImageBytes = bytes;
          });
        } else {
          setState(() {
            _imageFile = File(image.path);
          });
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Ïù¥ÎØ∏ÏßÄÎ•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    Widget imageWidget;
    if (kIsWeb && _webImageBytes != null) {
      imageWidget = ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: Image.memory(_webImageBytes!,
            fit: BoxFit.cover, width: double.infinity),
      );
    } else if (!kIsWeb && _imageFile != null) {
      imageWidget = ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child:
            Image.file(_imageFile!, fit: BoxFit.cover, width: double.infinity),
      );
    } else {
      imageWidget = const Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.add_a_photo, color: Color(0xFF4CAF50), size: 36),
          SizedBox(height: 8),
          Text('ÏÇ¨ÏßÑ/ÏòÅÏÉÅ Ï∂îÍ∞ÄÌïòÍ∏∞', style: TextStyle(color: Color(0xFF4CAF50))),
        ],
      );
    }

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(18),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('ÏÇ¨ÏßÑ/ÏòÅÏÉÅ Ï∂îÍ∞ÄÌïòÍ∏∞',
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
          const SizedBox(height: 16),
          GestureDetector(
            onTap: _pickImage,
            child: Container(
              height: 200,
              decoration: BoxDecoration(
                color: const Color(0xFFF8F8FA),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.grey.shade200),
              ),
              child: Center(child: imageWidget),
            ),
          ),
        ],
      ),
    );
  }
}

class _RewardSection extends StatelessWidget {
  const _RewardSection();
  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFFFFF8E1),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Icon(Icons.attach_money, color: Colors.amber, size: 28),
              SizedBox(width: 10),
              Text('ÌÉÄÏûÑÏ∫°Ïäê ÏûëÏÑ± Î¶¨ÏõåÎìú',
                  style: TextStyle(fontWeight: FontWeight.bold, fontSize: 15)),
            ],
          ),
          const SizedBox(height: 6),
          const Text('ÏûëÏÑ± Ïãú NHÎ©§Î≤ÑÏä§ 50Ìè¨Ïù∏Ìä∏ Ï†ÅÎ¶Ω', style: TextStyle(fontSize: 13)),
          const SizedBox(height: 8),
          Row(
            children: [
              const Text('Ïó∞ÏÜç ÏûëÏÑ± Ï§ë - 5ÏùºÏß∏',
                  style: TextStyle(fontSize: 13, color: Colors.black87)),
              const Spacer(),
              Text('7Ïùº (+200P)',
                  style: TextStyle(
                      fontSize: 13,
                      color: Colors.amber[800],
                      fontWeight: FontWeight.bold)),
            ],
          ),
          const SizedBox(height: 8),
          Stack(
            children: [
              Container(
                height: 8,
                decoration: BoxDecoration(
                  color: Colors.amber[100],
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              Container(
                height: 8,
                width: MediaQuery.of(context).size.width * 0.5,
                decoration: BoxDecoration(
                  color: Colors.amber,
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          const Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text('0Ïùº', style: TextStyle(fontSize: 12, color: Colors.black54)),
              Text('5Ïùº', style: TextStyle(fontSize: 12, color: Colors.black54)),
              Text('7Ïùº', style: TextStyle(fontSize: 12, color: Colors.black54)),
            ],
          ),
        ],
      ),
    );
  }
}

class MockCapsuleContentStore {
  static int contentCount = 4;
  static void addContent() {
    contentCount++;
  }
}

class _BottomButtons extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final args = ModalRoute.of(context)?.settings.arguments as Map?;
    final capsuleInfo = args?['capsuleInfo'] as Map?;
    final capsuleType =
        args?['capsuleType'] as CapsuleType? ?? CapsuleType.personal;

    return Container(
      color: Colors.white,
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      child: Row(
        children: [
          Expanded(
            child: OutlinedButton(
              onPressed: () {},
              style: OutlinedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                textStyle: const TextStyle(fontWeight: FontWeight.bold),
                side: const BorderSide(color: Color(0xFF4CAF50)),
              ),
              child: const Text('ÏûÑÏãúÏ†ÄÏû•'),
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: ElevatedButton(
              onPressed: () =>
                  _showPointsDialog(context, capsuleInfo, capsuleType),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF4CAF50),
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                textStyle: const TextStyle(fontWeight: FontWeight.bold),
              ),
              child: const Text('ÏûëÏÑ±ÏôÑÎ£å'),
            ),
          ),
        ],
      ),
    );
  }

  void _showPointsDialog(
      BuildContext context, Map? capsuleInfo, CapsuleType capsuleType) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          child: Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20),
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [Color(0xFFFFF8E1), Color(0xFFFFF3C4)],
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Ìè¨Ïù∏Ìä∏ ÏïÑÏù¥ÏΩòÍ≥º Ïï†ÎãàÎ©îÏù¥ÏÖò
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.amber.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.stars_rounded,
                    size: 48,
                    color: Colors.amber,
                  ),
                ),
                const SizedBox(height: 16),

                // Ï∂ïÌïò Î©îÏãúÏßÄ
                const Text(
                  'üéâ ÏûëÏÑ± ÏôÑÎ£å!',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFF2E7D32),
                  ),
                ),
                const SizedBox(height: 8),

                // Ìè¨Ïù∏Ìä∏ Ï†ÅÎ¶Ω Î©îÏãúÏßÄ
                Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.1),
                        spreadRadius: 1,
                        blurRadius: 4,
                      ),
                    ],
                  ),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Image.asset(
                            'assets/treasure_box_closed.png',
                            width: 24,
                            height: 24,
                            errorBuilder: (context, error, stackTrace) {
                              return const Icon(
                                Icons.account_balance_wallet,
                                size: 24,
                                color: Color(0xFF4CAF50),
                              );
                            },
                          ),
                          const SizedBox(width: 8),
                          const Text(
                            'NHÎ©§Î≤ÑÏä§ Ìè¨Ïù∏Ìä∏',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                              color: Colors.black87,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      const Text(
                        '50P Ï†ÅÎ¶Ω!',
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF4CAF50),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),

                // Ï∂îÍ∞Ä Ï†ïÎ≥¥
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.7),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Column(
                    children: [
                      Text(
                        'Ïó∞ÏÜç ÏûëÏÑ± Î≥¥ÎÑàÏä§',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: Colors.black87,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        '7Ïùº Ïó∞ÏÜç ÏûëÏÑ± Ïãú +200P Ï∂îÍ∞Ä!',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.black54,
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),

                // ÌôïÏù∏ Î≤ÑÌäº
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.of(context).pop(); // ÌåùÏóÖ Îã´Í∏∞

                      // Í∏∞Ï°¥ Î°úÏßÅ Ïã§Ìñâ
                      if (capsuleInfo != null) {
                        final newCapsule = {
                          'capsule': Capsule(
                            id: capsuleInfo['id'] ??
                                DateTime.now()
                                    .millisecondsSinceEpoch
                                    .toString(),
                            title: capsuleInfo['title'] ?? 'ÏÉà ÌÉÄÏûÑÏ∫°Ïäê',
                            type: capsuleInfo['type'] ?? capsuleType,
                            members: List<String>.from(
                                capsuleInfo['members'] ?? ['user1']),
                            createdAt:
                                capsuleInfo['createdAt'] ?? DateTime.now(),
                            openDate: capsuleInfo['openDate'] ??
                                DateTime(2025, 10, 31),
                            points: capsuleInfo['points'] ?? 0,
                            isOpened: capsuleInfo['isOpened'] ?? false,
                          ),
                          'contentCount': 1,
                          'showOpenButton': false,
                        };

                        // CapsuleCreateScreenÏúºÎ°ú ÎèåÏïÑÍ∞ÄÏÑú Í≤∞Í≥º Ï†ÑÎã¨
                        Navigator.of(context).pop(newCapsule);
                      } else {
                        // Ï∫°Ïäê Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Í∑∏ÎÉ• Îí§Î°úÍ∞ÄÍ∏∞
                        Navigator.of(context).pop();
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF4CAF50),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'ÌôïÏù∏',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
